{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport './style.less';\nimport React, { useMemo } from 'react';\nimport { Loading } from '../../../components';\nimport { useEcharts } from '../../../hooks';\nimport { collect, formatTime, queryRootFirstChild } from '../../../utils';\nimport { useRouter } from 'next/router';\nexport var formatTimeStamp = function formatTimeStamp(ts_ms) {\n  var date = new Date(Number(ts_ms));\n  return \"\".concat(date.getFullYear()).concat(String(date.getMonth() + 1).padStart(2, '0'));\n};\n\nvar getItemMonth = function getItemMonth(item) {\n  if (item && item['LastModified']) {\n    return formatTimeStamp(item['LastModified']);\n  }\n};\n\nvar getParentTitle = function getParentTitle(item) {\n  if (item.children) {\n    return item.title;\n  } else {\n    var path = item.path;\n    var meta = path.split('/');\n    return meta[meta.length - 2];\n  }\n};\n\nexport var ChartCurve = function ChartCurve(_ref) {\n  var data = _ref.data,\n      title = _ref.title;\n  var router = useRouter();\n  var ds = useMemo(function () {\n    return collect(data);\n  }, [data]);\n\n  var _useMemo = useMemo(function () {\n    var sortMap = {};\n    var cateMap = {};\n    var cateMapTitlesMap = {};\n\n    var _iterator = _createForOfIteratorHelper(ds),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var item = _step.value;\n        var month = getItemMonth(item);\n\n        if (month) {\n          if (month in sortMap) {\n            sortMap[month]++;\n          } else {\n            sortMap[month] = 1;\n          }\n        }\n\n        if (item.children) {\n          if (!(item.title in cateMap)) {\n            cateMap[item.title] = {};\n            cateMapTitlesMap[item.title] = item;\n          }\n        }\n\n        if (item['LastModified']) {\n          var cate = getParentTitle(item);\n\n          if (cate) {\n            var cateDvMap = cateMap[cate];\n\n            if (cateDvMap) {\n              var _date = formatTime(month);\n\n              if (_date in cateDvMap) {\n                cateDvMap[_date]++;\n              } else {\n                cateDvMap[_date] = 1;\n              }\n            }\n          }\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var ys = [];\n    var xs = [];\n    Object.keys(sortMap).forEach(function (time) {\n      var date = formatTime(time);\n      xs.push(date);\n      ys.push(sortMap[time]);\n    });\n    var maxY = Math.max.apply(null, ys);\n    return [xs, ys, cateMap, maxY, maxY / xs.length, cateMapTitlesMap];\n  }, [ds]),\n      xs = _useMemo[0],\n      ys = _useMemo[1],\n      cateMap = _useMemo[2],\n      maxY = _useMemo[3],\n      ratio = _useMemo[4],\n      map = _useMemo[5];\n\n  var cateKeys = useMemo(function () {\n    return cateMap ? Object.keys(cateMap) : [];\n  }, [cateMap]);\n  var scatter = useMemo(function () {\n    var data = [];\n    var maxCateCount = 0;\n\n    for (var i = 0; i < xs.length; i++) {\n      var currentDate = xs[i]; // find maxCount Cate in the current date\n\n      var catMaxCountName = '';\n      var cateMaxCount = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(cateKeys),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var cate = _step2.value;\n          var dv = cateMap[cate];\n\n          if (dv[currentDate] > cateMaxCount) {\n            cateMaxCount = dv[currentDate];\n            catMaxCountName = cate;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (cateMaxCount > maxCateCount) {\n        maxCateCount = cateMaxCount;\n      }\n\n      data.push({\n        name: currentDate,\n        value: i * ratio,\n        cate: catMaxCountName,\n        cateCount: cateMaxCount\n      });\n    }\n\n    return {\n      data: data,\n      type: 'scatter',\n      label: {\n        show: true,\n        formatter: function formatter(params) {\n          var _params$data;\n\n          return \"\".concat(params === null || params === void 0 ? void 0 : (_params$data = params.data) === null || _params$data === void 0 ? void 0 : _params$data.cate);\n        },\n        color: '#747474'\n      },\n      symbolSize: function symbolSize(value, params) {\n        var _params$data2;\n\n        return (params === null || params === void 0 ? void 0 : (_params$data2 = params.data) === null || _params$data2 === void 0 ? void 0 : _params$data2.cateCount) * maxY / maxCateCount;\n      },\n      itemStyle: {\n        color: 'rgba(132, 150, 255, 0.28)'\n      }\n    };\n  }, [cateMap, xs, cateKeys]);\n\n  var _useEcharts = useEcharts(function (chart) {\n    chart.on('click', 'series.scatter.label', function (args) {\n      var _args$data;\n\n      if (map[args === null || args === void 0 ? void 0 : (_args$data = args.data) === null || _args$data === void 0 ? void 0 : _args$data.cate]) {\n        var _args$data2;\n\n        var firstChild = queryRootFirstChild(map[args === null || args === void 0 ? void 0 : (_args$data2 = args.data) === null || _args$data2 === void 0 ? void 0 : _args$data2.cate]);\n        router.push(firstChild.path);\n      }\n    });\n    chart.setOption({\n      tooltip: {\n        show: true,\n        trigger: 'axis',\n        formatter: function formatter(params) {\n          var _scatterParams$data;\n\n          var curveParams = params[0];\n          var scatterParams = params[1];\n          return \"\".concat(curveParams === null || curveParams === void 0 ? void 0 : curveParams.marker).concat(curveParams === null || curveParams === void 0 ? void 0 : curveParams.name, \"\\n            <br/>\").concat(curveParams === null || curveParams === void 0 ? void 0 : curveParams.value, \"\\u7BC7\\n            <br/>\\u5F53\\u6708focus: \").concat(scatterParams === null || scatterParams === void 0 ? void 0 : (_scatterParams$data = scatterParams.data) === null || _scatterParams$data === void 0 ? void 0 : _scatterParams$data.cate);\n        }\n      },\n      grid: {\n        bottom: 30,\n        top: 30,\n        left: 30,\n        right: 30\n      },\n      xAxis: {\n        type: 'category',\n        data: xs,\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        name: '发布文章数',\n        type: 'value',\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        splitLine: {\n          lineStyle: {\n            color: 'rgba(158, 158, 158, 0.2)'\n          }\n        },\n        axisLabel: {\n          formatter: function formatter(value) {\n            return \"\".concat(value);\n          }\n        }\n      },\n      series: [{\n        data: ys,\n        type: 'line',\n        smooth: true,\n        showSymbol: false\n      }, scatter]\n    });\n  }, [xs, ys]),\n      _useEcharts2 = _slicedToArray(_useEcharts, 2),\n      ref = _useEcharts2[0],\n      loading = _useEcharts2[1];\n\n  return __jsx(\"div\", {\n    className: \"ChartCurve\"\n  }, loading && __jsx(Loading, null), __jsx(\"h3\", {\n    className: \"title\"\n  }, title), __jsx(\"div\", {\n    className: \"chart\",\n    ref: ref\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}