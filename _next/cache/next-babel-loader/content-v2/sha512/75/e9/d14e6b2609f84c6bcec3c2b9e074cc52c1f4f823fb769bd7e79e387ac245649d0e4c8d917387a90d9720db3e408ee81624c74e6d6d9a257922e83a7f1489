{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport LRU from 'lru-cache';\nimport { TestError } from '../utils/createError';\nimport { toQueryStr } from '../utils/toQueryStr';\nimport { ApiConfig } from './apiConfig';\nimport { ApiUrls, cachelist } from './apiUrls';\nvar HOUR_MS = 3600000; // 同构缓存\n\nvar cache = new LRU({\n  max: 1000,\n  maxAge: 1 * HOUR_MS // 毫秒\n\n});\n\nvar matchCache = function matchCache(url) {\n  var api = url.split('?')[0];\n  return !!cachelist.find(function (key) {\n    return api.startsWith(ApiUrls[key]);\n  });\n};\n\nexport var getCacheSize = function getCacheSize() {\n  return cache.itemCount;\n};\nexport var getCache = function getCache(url) {\n  if (url && matchCache(url)) {\n    var data = cache.get(url);\n\n    if (data) {\n      if (ApiConfig.log) {\n        console.log(\"[Get-Cache]: \".concat(url));\n      }\n\n      return data;\n    }\n  }\n};\nexport var setCache = function setCache(url, data) {\n  if (url && matchCache(url)) {\n    if (ApiConfig.log) {\n      console.log(\"[Set-Cache]: \".concat(url));\n    }\n\n    cache.set(url, data);\n  }\n};\nexport var delCache = function delCache(url) {\n  if (url && matchCache(url)) {\n    if (ApiConfig.log) {\n      console.log(\"[Del-Cache]: \".concat(url));\n    }\n\n    cache.del(url);\n  }\n};\nexport var clearCache = function clearCache() {\n  cache.reset();\n};\n/**\n * axios实例必须handleError，此方法不负责异常处理\n */\n\nexport var enhanceAxiosCache = function enhanceAxiosCache(axios) {\n  var originGet = axios.get;\n\n  axios.get = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, config) {\n      var queryStr, cacheKey, result, apiRes;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              queryStr = config !== null && config !== void 0 && config.params ? \"?\".concat(toQueryStr(config.params)) : '';\n              cacheKey = \"\".concat(url).concat(queryStr);\n              result = getCache(cacheKey); // 超过maxAge这里result会变成null\n\n              if (!result) {\n                _context.next = 5;\n                break;\n              }\n\n              return _context.abrupt(\"return\", result);\n\n            case 5:\n              _context.next = 7;\n              return originGet(url, config);\n\n            case 7:\n              apiRes = _context.sent;\n\n              if (!TestError(apiRes.data)) {\n                _context.next = 13;\n                break;\n              }\n\n              // 如果异常，直接返回\n              delCache(cacheKey);\n              return _context.abrupt(\"return\", apiRes);\n\n            case 13:\n              // 添加缓存\n              setCache(cacheKey, apiRes);\n              return _context.abrupt(\"return\", apiRes);\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return axios;\n};","map":null,"metadata":{},"sourceType":"module"}