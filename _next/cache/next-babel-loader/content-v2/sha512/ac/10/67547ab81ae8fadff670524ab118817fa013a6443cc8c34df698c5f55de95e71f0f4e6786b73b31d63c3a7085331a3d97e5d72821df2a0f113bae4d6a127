{"ast":null,"code":"var __jsx = React.createElement;\nimport './style.less';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Loading } from '../../../components';\nimport { useLoadScript } from '../../../hooks';\nimport { getData } from '../../../api/getData';\n\nconst disableMindExpand = (root = document) => {\n  Array.from(root.getElementsByTagName('g')).forEach(node => {\n    var _node$id, _node$id$startsWith;\n\n    if (node !== null && node !== void 0 && (_node$id = node.id) !== null && _node$id !== void 0 && (_node$id$startsWith = _node$id.startsWith) !== null && _node$id$startsWith !== void 0 && _node$id$startsWith.call(_node$id, 'node_expander')) {\n      node.style.display = 'none';\n    }\n  });\n};\n\nconst resetAnchorTarget = (root = document) => {\n  Array.from(root.getElementsByTagName('a')).forEach(node => {\n    const href = node.getAttribute('xlink:href');\n\n    if (node.target && href) {\n      if (href.includes('#/blog')) {\n        node.setAttribute('target', '_self');\n      }\n    }\n  });\n};\n\nconst requestIdleCallback = (fn, delay = 500) => setTimeout(() => fn(), delay);\n\nexport const ChartMind = () => {\n  const [kityminder, loading] = useLoadScript('kityminder', 'https://cdn.jsdelivr.net/gh/saber2pr/MyWeb@master/js/minder.min.js');\n  const containRef = useRef();\n  const mindRef = useRef();\n  const {\n    0: displayLoading,\n    1: setDisplayLoading\n  } = useState(loading);\n\n  const initChart = async () => {\n    if (kityminder && containRef.current) {\n      setDisplayLoading(true);\n      const mindJson = await getData('mind');\n      setDisplayLoading(false);\n\n      if (!mindRef.current) {\n        mindRef.current = new kityminder.Minder({\n          renderTo: containRef.current\n        });\n      }\n\n      const minder = mindRef.current;\n\n      if (minder) {\n        minder.importJson(mindJson);\n        minder.execCommand('Theme', 'fresh-blue');\n        window['__minder'] = minder;\n        requestIdleCallback(() => {\n          disableMindExpand(containRef.current);\n          resetAnchorTarget(containRef.current);\n\n          minder._resetEvents();\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    initChart();\n  }, [kityminder]);\n  return __jsx(\"div\", {\n    className: \"ChartMind\"\n  }, displayLoading && __jsx(Loading, null), __jsx(\"div\", {\n    ref: containRef,\n    className: \"container\"\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}