{"ast":null,"code":"import axios from 'axios';\nimport { getHost } from '../utils/url';\nimport { ApiConfig } from './apiConfig';\nimport { enhanceAxiosCache } from './cache';\nimport { autoWithClientToken, calcRequestTimeEnd, calcRequestTimeStart, decodeApiPtbk, handleError, printResData, printResUrlTime, reThrowError, rewriteApiUrl, setClientErrorMessage } from './interceptors';\n\nvar JSONbigString = require('json-bigint')({\n  storeAsString: true\n});\n\n// nextjs不支持BigInt,需要这里转换为string\nvar HTMLTAG = /^\\</;\naxios.defaults.transformResponse = [function (text) {\n  try {\n    // java报错会返回html\n    if (HTMLTAG.test(text)) {\n      return text;\n    } else {\n      return JSONbigString.parse(text);\n    }\n  } catch (error) {\n    return text;\n  }\n}];\n/**\n * 用于客户端请求(Ajax)使用的axios实例\n * > 请求proxy\n */\n\nvar requestApiConfig = {\n  baseURL: ApiConfig.proxyApi,\n  timeout: ApiConfig.timeout,\n  withCredentials: true\n};\nvar requestApi = axios.create(requestApiConfig); // 自动携带token\n\nrequestApi.interceptors.request.use(autoWithClientToken); // 开始计算请求时间\n\nrequestApi.interceptors.request.use(calcRequestTimeStart); // 结束计算请求时间\n\nrequestApi.interceptors.response.use(calcRequestTimeEnd); // api解密\n\nrequestApi.interceptors.response.use(decodeApiPtbk); // 打印请求url\n\nrequestApi.interceptors.response.use(printResUrlTime); // 打印返回值信息\n\nrequestApi.interceptors.response.use(printResData); // 提示错误\n\nrequestApi.interceptors.response.use(setClientErrorMessage, setClientErrorMessage); // 抛出被服务端吞掉的错误\n\nrequestApi.interceptors.response.use(reThrowError);\n/**\n * 工厂函数\n * 用于服务端请求使用的axios实例\n * 代理服务端无状态,所以使用函数式,保证每个请求都是新的实例\n */\n\nvar createRequestRoot = function createRequestRoot(headers) {\n  var baseURL = ApiConfig.target;\n\n  if (ApiConfig.changeOrigin) {\n    headers.host = getHost(ApiConfig.target);\n\n    if (ApiConfig.useProxyOrigin) {\n      baseURL += ApiConfig.proxyApi;\n    }\n  }\n\n  var requestRoot = axios.create({\n    baseURL: baseURL,\n    timeout: ApiConfig.timeout,\n    headers: headers\n  }); // 转发到target前，去除^/api前缀\n\n  requestRoot.interceptors.request.use(rewriteApiUrl); // 开始计算请求时间\n\n  requestRoot.interceptors.request.use(calcRequestTimeStart); // 结束计算请求时间\n\n  requestRoot.interceptors.response.use(calcRequestTimeEnd); // api解密\n\n  requestRoot.interceptors.response.use(decodeApiPtbk); // 打印请求url， 捕获异常\n\n  requestRoot.interceptors.response.use(printResUrlTime, handleError);\n  return requestRoot;\n};\n\nvar createPureRequest = function createPureRequest(config) {\n  var request = axios.create(config);\n  request.interceptors.request.use(calcRequestTimeStart);\n  request.interceptors.request.use(rewriteApiUrl);\n  request.interceptors.response.use(calcRequestTimeEnd);\n  request.interceptors.response.use(printResUrlTime, handleError);\n  return request;\n};\n\nvar requestUri = enhanceAxiosCache(createPureRequest());\nexport { requestApi, createRequestRoot, createPureRequest, requestUri };","map":null,"metadata":{},"sourceType":"module"}