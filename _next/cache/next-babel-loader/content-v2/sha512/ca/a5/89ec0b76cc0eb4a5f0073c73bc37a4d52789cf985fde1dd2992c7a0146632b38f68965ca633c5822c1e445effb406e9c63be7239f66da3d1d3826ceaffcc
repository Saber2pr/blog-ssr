{"ast":null,"code":"import LRU from 'lru-cache';\nimport { TestError } from '../utils/createError';\nimport { toQueryStr } from '../utils/toQueryStr';\nimport { ApiConfig } from './apiConfig';\nimport { ApiUrls, cachelist } from './apiUrls';\nconst HOUR_MS = 3600000; // 同构缓存\n\nconst cache = new LRU({\n  max: 1000,\n  maxAge: 1 * HOUR_MS // 毫秒\n\n});\n\nconst matchCache = url => {\n  const api = url.split('?')[0];\n  return !!cachelist.find(key => api.startsWith(ApiUrls[key]));\n};\n\nexport const getCacheSize = () => cache.itemCount;\nexport const getCache = url => {\n  if (url && matchCache(url)) {\n    const data = cache.get(url);\n\n    if (data) {\n      if (ApiConfig.log) {\n        console.log(`[Get-Cache]: ${url}`);\n      }\n\n      return data;\n    }\n  }\n};\nexport const setCache = (url, data) => {\n  if (url && matchCache(url)) {\n    if (ApiConfig.log) {\n      console.log(`[Set-Cache]: ${url}`);\n    }\n\n    cache.set(url, data);\n  }\n};\nexport const delCache = url => {\n  if (url && matchCache(url)) {\n    if (ApiConfig.log) {\n      console.log(`[Del-Cache]: ${url}`);\n    }\n\n    cache.del(url);\n  }\n};\nexport const clearCache = () => {\n  cache.reset();\n};\n/**\n * axios实例必须handleError，此方法不负责异常处理\n */\n\nexport const enhanceAxiosCache = axios => {\n  const originGet = axios.get;\n\n  axios.get = async (url, config) => {\n    const queryStr = config !== null && config !== void 0 && config.params ? `?${toQueryStr(config.params)}` : '';\n    const cacheKey = `${url}${queryStr}`;\n    const result = getCache(cacheKey); // 超过maxAge这里result会变成null\n\n    if (result) {\n      return result;\n    }\n\n    const apiRes = await originGet(url, config); // 异常已处理\n\n    if (TestError(apiRes.data)) {\n      // 如果异常，直接返回\n      delCache(cacheKey);\n      return apiRes;\n    } else {\n      // 添加缓存\n      setCache(cacheKey, apiRes);\n      return apiRes;\n    }\n  };\n\n  return axios;\n};","map":null,"metadata":{},"sourceType":"module"}