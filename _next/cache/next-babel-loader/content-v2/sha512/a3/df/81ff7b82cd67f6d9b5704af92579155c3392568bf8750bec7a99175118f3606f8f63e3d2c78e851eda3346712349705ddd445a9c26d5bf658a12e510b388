{"ast":null,"code":"var __jsx = React.createElement;\nimport './style.less';\nimport ClipboardJS from 'clipboard';\n/*\n * @Author: saber2pr\n * @Date: 2019-07-15 08:49:51\n * @Last Modified by: saber2pr\n * @Last Modified time: 2020-04-07 14:10:59\n */\n\nimport React, { Fragment, useEffect, useRef } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/prism-light';\nimport { Link } from '../../../link';\nimport { mergeCode } from '../../core';\nimport { REG } from '../../reg';\nexport function Md2jsx({\n  children,\n  theme\n}) {\n  const jsx = [];\n  const lines = mergeCode(children.split(/\\n|\\r\\n/));\n\n  for (let i = 0; i < lines.length; ++i) {\n    const line = lines[i];\n\n    if (line.startsWith('```')) {\n      renderCode({\n        jsx,\n        i,\n        line,\n        theme\n      });\n    } else if (line.startsWith('#')) {\n      renderHeader({\n        jsx,\n        i,\n        line\n      });\n    } else if (line.startsWith('>')) {\n      renderComment({\n        jsx,\n        i,\n        line\n      });\n    } else if (REG.imgtype.test(line)) {\n      renderImg({\n        jsx,\n        i,\n        line\n      });\n    } else if (REG.atype_url.test(line)) {\n      renderAnchor({\n        jsx,\n        i,\n        line\n      });\n    } else if (line.startsWith('---') || line.startsWith('***')) {\n      renderHR({\n        jsx,\n        i,\n        line\n      });\n    } else {\n      jsx.push(__jsx(\"p\", {\n        key: i,\n        dangerouslySetInnerHTML: {\n          __html: line.replace(/\\t/g, '&nbsp;&nbsp;')\n        }\n      }));\n    }\n  }\n\n  return __jsx(React.Fragment, null, jsx);\n}\n\n(function (_Md2jsx) {\n  const registerLanguage = _Md2jsx.registerLanguage = (name, meta) => SyntaxHighlighter.registerLanguage(name, meta);\n})(Md2jsx || (Md2jsx = {}));\n\nconst renderCode = ({\n  line,\n  jsx,\n  theme,\n  i\n}) => {\n  const codetype = REG.codetype.exec(line)[0].slice(3);\n  const code = line.slice(codetype.length + 4, line.length - 4);\n\n  const Code = () => {\n    const ref = useRef();\n    useEffect(() => {\n      const cp = new ClipboardJS(ref.current);\n      return () => cp.destroy();\n    }, []);\n    const id = 'MD2JSX-Code-' + i;\n    return __jsx(\"div\", {\n      className: \"MD2JSX-Code\"\n    }, __jsx(\"div\", {\n      title: \"\\u590D\\u5236\\u5230\\u526A\\u8D34\\u677F\",\n      className: \"Paste\",\n      ref: ref,\n      \"data-clipboard-target\": '#' + id\n    }, __jsx(\"i\", {\n      className: \"iconfont icon-fuzhi\"\n    })), __jsx(\"div\", {\n      id: id\n    }, __jsx(SyntaxHighlighter, {\n      language: codetype,\n      style: theme\n    }, code)));\n  };\n\n  jsx.push(__jsx(Code, {\n    key: i\n  }));\n};\n\nconst renderHeader = ({\n  line,\n  jsx,\n  i\n}) => {\n  let count = 0;\n  let text = '';\n\n  for (const ch of line) {\n    if (ch === '#') {\n      count++;\n    } else {\n      text += ch;\n    }\n  }\n\n  jsx.push(__jsx(Fragment, {\n    key: i\n  }, /*#__PURE__*/React.createElement(`h${count}`, null, text)));\n};\n\nconst renderComment = ({\n  jsx,\n  i,\n  line\n}) => {\n  jsx.push(__jsx(\"p\", {\n    key: i,\n    style: {\n      color: 'gray',\n      borderLeft: '0.2rem solid #d0d0d0',\n      paddingLeft: '0.5rem'\n    }\n  }, line.slice(2)));\n};\n\nconst renderImg = ({\n  jsx,\n  i,\n  line\n}) => {\n  const meta = line.match(REG.imgtype)[0];\n  const title = meta.match(REG.imgtype_title)[0].replace(/\\[|\\]/g, '');\n  const url = meta.match(REG.imgtype_url)[0].replace(/\\(|\\)/g, '');\n  jsx.push(__jsx(\"img\", {\n    key: i,\n    src: url,\n    alt: title,\n    style: {\n      maxWidth: '100%'\n    }\n  }));\n};\n\nconst renderAnchor = ({\n  jsx,\n  i,\n  line\n}) => {\n  const meta = line.match(REG.atype_url)[0];\n  const title = meta.match(REG.imgtype_title)[0].replace(/\\[|\\]/g, '');\n  let url = meta.match(REG.imgtype_url)[0].replace(/\\(|\\)/g, '');\n  url = url.replace(/^#/, '');\n  jsx.push(__jsx(\"div\", {\n    key: url + title + i\n  }, __jsx(Link, {\n    href: url\n  }, title)));\n};\n\nconst renderHR = ({\n  jsx,\n  i,\n  line\n}) => {\n  jsx.push(__jsx(\"hr\", {\n    key: i\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}