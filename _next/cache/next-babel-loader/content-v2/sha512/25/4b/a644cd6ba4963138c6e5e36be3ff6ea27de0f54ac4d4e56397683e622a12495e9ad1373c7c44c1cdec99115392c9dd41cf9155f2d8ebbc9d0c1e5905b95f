{"ast":null,"code":"import { KEYS } from '../utils/constants';\nimport { createError, unWrapError } from '../utils/createError';\nimport { getNowMon } from '../utils/date';\nimport { Messager } from '../utils/message';\nimport { ptbk } from '../utils/ptbk';\nimport { toQueryStr } from '../utils/toQueryStr';\nimport { getHost } from '../utils/url';\nimport { ApiConfig } from './apiConfig';\nimport { getHeaderAuth, getToken, setHeaderAuth } from './getToken';\nimport { getMetadata, rewriteUrl, setMetadata } from './utils';\n\n/**\n * 输出调试信息\n */\nexport const printResUrlTime = res => {\n  if (ApiConfig.log) {\n    const req = res.config;\n\n    if (req) {\n      let reqUrl = req.baseURL + req.url;\n\n      if (req.params) {\n        let queryUrl = toQueryStr(req.params);\n\n        if (reqUrl.includes('?')) {\n          queryUrl = '&' + queryUrl;\n        } else {\n          queryUrl = '?' + queryUrl;\n        }\n\n        reqUrl += queryUrl;\n      }\n\n      if (true) {\n        reqUrl = rewriteUrl(reqUrl);\n      }\n\n      const duration = getMetadata(res, 'duration');\n      let optionalParams = [getNowMon().format('YYYY-MM-DD HH:mm:ss'), reqUrl];\n\n      if (duration) {\n        optionalParams = optionalParams.concat(`[duration]: ${duration}ms`);\n        setMetadata(res, 'duration', duration);\n      }\n\n      console.log(...optionalParams);\n    }\n  }\n\n  return res;\n};\nexport const printResData = res => {\n  if (ApiConfig.log) {\n    console.log(res);\n  }\n\n  return res;\n};\n/**\n * 客户端重新抛出被服务端吞掉的错误\n */\n\nexport const reThrowError = res => {\n  const error = unWrapError(res === null || res === void 0 ? void 0 : res.data);\n\n  if (error) {\n    return Promise.reject(error);\n  }\n\n  return res;\n};\n/**\n * 去掉代理用的 ^/api\n */\n\nexport const rewriteApiUrl = req => {\n  req.url = rewriteUrl(req.url, ApiConfig.proxyApi);\n  return req;\n};\n/**\n * 客户端报错提示\n */\n\nexport const setClientErrorMessage = res => {\n  const error = res.data[KEYS.error];\n\n  if (error) {\n    if (ApiConfig.log) {\n      // 输出错误信息\n      Messager.error(error);\n    }\n  }\n\n  return res;\n};\n/**\n * 计算接口请求时间\n */\n\nexport const calcRequestTimeStart = req => {\n  if (ApiConfig.log) {\n    setMetadata(req, 'startTime', new Date());\n  }\n\n  return req;\n};\n/**\n * 计算接口请求时间\n */\n\nexport const calcRequestTimeEnd = res => {\n  if (ApiConfig.log) {\n    const endTime = new Date();\n    const startTime = getMetadata(res, 'startTime');\n    setMetadata(res, 'duration', Number(endTime) - Number(startTime));\n  }\n\n  return res;\n};\n/**\n * 转发时如果需要，代理验证host\n */\n\nexport const changeOrigin = req => {\n  var _req$headers;\n\n  const headers = (_req$headers = req.headers) !== null && _req$headers !== void 0 ? _req$headers : {};\n  headers.host = getHost(req.baseURL);\n  req.headers = headers;\n  return req;\n};\n/**\n * axios异常全局处理（服务端渲染）\n */\n\nexport const handleError = error => {\n  var _error$request, _error$request$res;\n\n  console.log('[error]:', error === null || error === void 0 ? void 0 : error.message, error === null || error === void 0 ? void 0 : (_error$request = error.request) === null || _error$request === void 0 ? void 0 : (_error$request$res = _error$request.res) === null || _error$request$res === void 0 ? void 0 : _error$request$res.responseUrl);\n  return {\n    data: {\n      [KEYS.error]: createError(error)\n    }\n  };\n};\nexport const decodeApiPtbk = res => {\n  if (ptbk.isPtbk(res === null || res === void 0 ? void 0 : res.data)) {\n    res.data = ptbk.decode(res === null || res === void 0 ? void 0 : res.data);\n  }\n\n  return res;\n};\n/**\n * 客户端自动携带token\n */\n\nexport const autoWithClientToken = req => {\n  const headers = req.headers;\n\n  if (headers) {\n    const token = getToken();\n\n    if (token) {\n      setHeaderAuth(headers, token);\n    }\n  }\n\n  return req;\n};\n/**\n * 代理服务端如何发送token\n */\n\nexport const resolveServerToken = req => {\n  const headers = req.headers;\n\n  if (headers) {\n    const token = getHeaderAuth(headers);\n\n    if (token) {// 例如放到cookie中\n      // 不处理就是auth header\n    }\n  }\n\n  return req;\n};","map":null,"metadata":{},"sourceType":"module"}