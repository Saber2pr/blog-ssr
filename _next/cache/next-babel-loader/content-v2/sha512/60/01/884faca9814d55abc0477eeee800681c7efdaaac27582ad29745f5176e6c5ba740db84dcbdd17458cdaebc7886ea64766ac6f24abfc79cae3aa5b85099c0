{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport './style.less';\nimport AntdAvatar from 'antd/lib/avatar';\nimport React, { useEffect, useState } from 'react';\nimport { resolveImgSrc } from '../../utils/resolveImgSrc';\nexport const Avatar = (_ref) => {\n  let {\n    src,\n    pendingSrc\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"src\", \"pendingSrc\"]);\n\n  const {\n    0: display,\n    1: setDisplay\n  } = useState(src);\n  useEffect(() => {\n    setDisplay(src);\n  }, [src]);\n  useEffect(() => {\n    if (pendingSrc) {\n      pendingSrc.then(setDisplay);\n    }\n  }, [pendingSrc]);\n  return __jsx(AntdAvatar, _extends({}, props, {\n    src: resolveImgSrc(display)\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}