{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { appendPathExt, join } from '../utils';\nimport { ApiUrls } from './apiUrls';\nimport { requestUri } from './request';\nimport { requestProxy } from './requestProxy';\nexport var getContent = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(path) {\n    var proxy,\n        res,\n        fileUri,\n        absPath,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            proxy = _args.length > 1 && _args[1] !== undefined ? _args[1] : false;\n\n            if (path) {\n              _context.next = 3;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 3:\n            res = null;\n            fileUri = appendPathExt(path);\n\n            if (fileUri && /^\\/blog/.test(fileUri)) {\n              fileUri = fileUri.replace(/^\\/blog/, '');\n            }\n\n            absPath = join(ApiUrls.content_, decodeURIComponent(fileUri));\n\n            if (!proxy) {\n              _context.next = 13;\n              break;\n            }\n\n            _context.next = 10;\n            return requestProxy({\n              method: 'get',\n              url: absPath\n            });\n\n          case 10:\n            res = _context.sent;\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.next = 15;\n            return requestUri.get(encodeURI(absPath));\n\n          case 15:\n            res = _context.sent;\n\n          case 16:\n            return _context.abrupt(\"return\", res.data);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getContent(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}