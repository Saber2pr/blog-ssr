{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport './style.less';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Loading } from '../../../components';\nimport { useLoadScript } from '../../../hooks';\nimport { getData } from '../../../api/getData';\n\nvar disableMindExpand = function disableMindExpand() {\n  var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  Array.from(root.getElementsByTagName('g')).forEach(function (node) {\n    var _node$id, _node$id$startsWith;\n\n    if (node !== null && node !== void 0 && (_node$id = node.id) !== null && _node$id !== void 0 && (_node$id$startsWith = _node$id.startsWith) !== null && _node$id$startsWith !== void 0 && _node$id$startsWith.call(_node$id, 'node_expander')) {\n      node.style.display = 'none';\n    }\n  });\n};\n\nvar resetAnchorTarget = function resetAnchorTarget() {\n  var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  Array.from(root.getElementsByTagName('a')).forEach(function (node) {\n    var href = node.getAttribute('xlink:href');\n\n    if (node.target && href) {\n      if (href.includes('#/blog')) {\n        node.setAttribute('target', '_self');\n      }\n    }\n  });\n};\n\nvar requestIdleCallback = function requestIdleCallback(fn) {\n  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;\n  return setTimeout(function () {\n    return fn();\n  }, delay);\n};\n\nexport var ChartMind = function ChartMind() {\n  var _useLoadScript = useLoadScript('kityminder', 'https://cdn.jsdelivr.net/gh/saber2pr/MyWeb@master/js/minder.min.js'),\n      _useLoadScript2 = _slicedToArray(_useLoadScript, 2),\n      kityminder = _useLoadScript2[0],\n      loading = _useLoadScript2[1];\n\n  var containRef = useRef();\n  var mindRef = useRef();\n\n  var _useState = useState(loading),\n      displayLoading = _useState[0],\n      setDisplayLoading = _useState[1];\n\n  var initChart = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var mindJson, minder;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(kityminder && containRef.current)) {\n                _context.next = 9;\n                break;\n              }\n\n              setDisplayLoading(true);\n              _context.next = 4;\n              return getData('mind');\n\n            case 4:\n              mindJson = _context.sent;\n              setDisplayLoading(false);\n\n              if (!mindRef.current) {\n                mindRef.current = new kityminder.Minder({\n                  renderTo: containRef.current\n                });\n              }\n\n              minder = mindRef.current;\n\n              if (minder) {\n                minder.importJson(mindJson);\n                minder.execCommand('Theme', 'fresh-blue');\n                window['__minder'] = minder;\n                requestIdleCallback(function () {\n                  disableMindExpand(containRef.current);\n                  resetAnchorTarget(containRef.current);\n\n                  minder._resetEvents();\n                });\n              }\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function initChart() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    initChart();\n  }, [kityminder]);\n  return __jsx(\"div\", {\n    className: \"ChartMind\"\n  }, displayLoading && __jsx(Loading, null), __jsx(\"div\", {\n    ref: containRef,\n    className: \"container\"\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}