{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport './style.less';\nimport React, { useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { useUnMount } from '../../hooks/useUnMount';\nimport { checkIsMob } from '../../utils/checkIsMob';\nexport const Model = /*#__PURE__*/React.forwardRef(({\n  inner,\n  onClickBg\n}, ref) => __jsx(\"div\", {\n  className: \"Model\",\n  onClick: onClickBg,\n  ref: ref\n}, __jsx(\"div\", {\n  className: \"Model-Box\",\n  onClick: e => e.stopPropagation()\n}, inner)));\nexport const useModel = Inner => {\n  const {\n    0: model,\n    1: setModel\n  } = useState(__jsx(React.Fragment, null));\n  const ref = useRef();\n\n  const open = () => {\n    if (!ref.current) {\n      const container = document.createElement('div');\n      document.body.append(container);\n      ref.current = container;\n    }\n\n    setModel( /*#__PURE__*/ReactDOM.createPortal(__jsx(Model, {\n      onClickBg: close,\n      inner: Inner\n    }), ref.current));\n  };\n\n  const close = () => setModel(__jsx(React.Fragment, null));\n\n  useUnMount(() => ref.current && document.body.removeChild(ref.current));\n  return [model, (show = true) => show ? open() : close()];\n};\n\nModel.alert = message => {\n  const container = document.createElement('div');\n  document.body.append(container);\n\n  const close = () => ReactDOM.unmountComponentAtNode(container) && document.body.removeChild(container);\n\n  ReactDOM.render(__jsx(Model, {\n    onClickBg: close,\n    inner: message({\n      close\n    })\n  }), container);\n};\n\nModel.Hidable = (message, onClickBg = ({\n  closeAnimated\n}) => closeAnimated()) => {\n  const container = document.createElement('div');\n  document.body.append(container);\n  const control_ref = /*#__PURE__*/React.createRef();\n\n  const close = () => ReactDOM.unmountComponentAtNode(container) && document.body.removeChild(container);\n\n  const hide = () => {\n    control_ref.current.style.left = '-100%';\n    control_ref.current.style.opacity = '0';\n  };\n\n  const show = () => {\n    control_ref.current.style.left = '0';\n    control_ref.current.style.opacity = '1';\n  };\n\n  ReactDOM.render(__jsx(Model, {\n    onClickBg: () => {\n      hide();\n      onClickBg({\n        close,\n        hide,\n        show,\n        closeAnimated: () => setTimeout(() => close(), 1000)\n      });\n    },\n    ref: control_ref,\n    inner: message({\n      close,\n      hide,\n      show\n    })\n  }), container);\n};\n\nconst createFrame = (html, close) => {\n  const {\n    clientWidth,\n    clientHeight\n  } = document.documentElement;\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n  const style = document.createElement('style');\n  const isMob = checkIsMob();\n  style.innerHTML = `body{padding-bottom:${isMob ? '40px' : '0px'};background-color:white}`;\n  doc.head.append(style);\n  const ratio = isMob ? [0.9, 0.8] : [0.8, 0.8];\n  return __jsx(React.Fragment, null, __jsx(\"button\", {\n    className: \"ButtonHigh\",\n    onClick: () => close(),\n    style: _objectSpread({\n      position: 'absolute'\n    }, isMob ? {\n      left: 8,\n      bottom: 8\n    } : {\n      top: 8,\n      right: 8\n    })\n  }, \"\\u5173\\u95ED\"), __jsx(\"iframe\", {\n    frameBorder: \"0\",\n    style: {\n      borderRadius: 4\n    },\n    width: clientWidth * ratio[0],\n    height: clientHeight * ratio[1],\n    srcDoc: doc.documentElement.innerHTML\n  }));\n};\n\nexport const requestFrameModal = async src => {\n  LOADING.init();\n  const html = await fetch(src).then(res => res.text());\n  LOADING.destroy();\n  Model.alert(({\n    close\n  }) => createFrame(html, () => {\n    close();\n    LOADING.destroy();\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}