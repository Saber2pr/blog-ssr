{"ast":null,"code":"var __jsx = React.createElement;\nimport './style.less';\nimport React, { useMemo } from 'react';\nimport { Loading } from '../../../components';\nimport { useEcharts } from '../../../hooks';\nimport { collect, formatTime, queryRootFirstChild } from '../../../utils';\nimport { useRouter } from 'next/router';\nexport const formatTimeStamp = ts_ms => {\n  const date = new Date(Number(ts_ms));\n  return `${date.getFullYear()}${String(date.getMonth() + 1).padStart(2, '0')}`;\n};\n\nconst getItemMonth = item => {\n  if (item && item['LastModified']) {\n    return formatTimeStamp(item['LastModified']);\n  }\n};\n\nconst getParentTitle = item => {\n  if (item.children) {\n    return item.title;\n  } else {\n    const path = item.path;\n    const meta = path.split('/');\n    return meta[meta.length - 2];\n  }\n};\n\nexport const ChartCurve = ({\n  data,\n  title\n}) => {\n  const router = useRouter();\n  const ds = useMemo(() => collect(data), [data]);\n  const {\n    0: xs,\n    1: ys,\n    2: cateMap,\n    3: maxY,\n    4: ratio,\n    5: map\n  } = useMemo(() => {\n    const sortMap = {};\n    const cateMap = {};\n    const cateMapTitlesMap = {};\n\n    for (const item of ds) {\n      const month = getItemMonth(item);\n\n      if (month) {\n        if (month in sortMap) {\n          sortMap[month]++;\n        } else {\n          sortMap[month] = 1;\n        }\n      }\n\n      if (item.children) {\n        if (!(item.title in cateMap)) {\n          cateMap[item.title] = {};\n          cateMapTitlesMap[item.title] = item;\n        }\n      }\n\n      if (item['LastModified']) {\n        const cate = getParentTitle(item);\n\n        if (cate) {\n          const cateDvMap = cateMap[cate];\n\n          if (cateDvMap) {\n            const date = formatTime(month);\n\n            if (date in cateDvMap) {\n              cateDvMap[date]++;\n            } else {\n              cateDvMap[date] = 1;\n            }\n          }\n        }\n      }\n    }\n\n    const ys = [];\n    const xs = [];\n    Object.keys(sortMap).forEach(time => {\n      const date = formatTime(time);\n      xs.push(date);\n      ys.push(sortMap[time]);\n    });\n    const maxY = Math.max.apply(null, ys);\n    return [xs, ys, cateMap, maxY, maxY / xs.length, cateMapTitlesMap];\n  }, [ds]);\n  const cateKeys = useMemo(() => cateMap ? Object.keys(cateMap) : [], [cateMap]);\n  const scatter = useMemo(() => {\n    const data = [];\n    let maxCateCount = 0;\n\n    for (let i = 0; i < xs.length; i++) {\n      const currentDate = xs[i]; // find maxCount Cate in the current date\n\n      let catMaxCountName = '';\n      let cateMaxCount = 0;\n\n      for (const cate of cateKeys) {\n        const dv = cateMap[cate];\n\n        if (dv[currentDate] > cateMaxCount) {\n          cateMaxCount = dv[currentDate];\n          catMaxCountName = cate;\n        }\n      }\n\n      if (cateMaxCount > maxCateCount) {\n        maxCateCount = cateMaxCount;\n      }\n\n      data.push({\n        name: currentDate,\n        value: i * ratio,\n        cate: catMaxCountName,\n        cateCount: cateMaxCount\n      });\n    }\n\n    return {\n      data,\n      type: 'scatter',\n      label: {\n        show: true,\n        formatter: params => {\n          var _params$data;\n\n          return `${params === null || params === void 0 ? void 0 : (_params$data = params.data) === null || _params$data === void 0 ? void 0 : _params$data.cate}`;\n        },\n        color: '#747474'\n      },\n      symbolSize: (value, params) => {\n        var _params$data2;\n\n        return (params === null || params === void 0 ? void 0 : (_params$data2 = params.data) === null || _params$data2 === void 0 ? void 0 : _params$data2.cateCount) * maxY / maxCateCount;\n      },\n      itemStyle: {\n        color: 'rgba(132, 150, 255, 0.28)'\n      }\n    };\n  }, [cateMap, xs, cateKeys]);\n  const [ref, loading] = useEcharts(chart => {\n    chart.on('click', 'series.scatter.label', args => {\n      var _args$data;\n\n      if (map[args === null || args === void 0 ? void 0 : (_args$data = args.data) === null || _args$data === void 0 ? void 0 : _args$data.cate]) {\n        var _args$data2;\n\n        const firstChild = queryRootFirstChild(map[args === null || args === void 0 ? void 0 : (_args$data2 = args.data) === null || _args$data2 === void 0 ? void 0 : _args$data2.cate]);\n        router.push(firstChild.path);\n      }\n    });\n    chart.setOption({\n      tooltip: {\n        show: true,\n        trigger: 'axis',\n\n        formatter(params) {\n          var _scatterParams$data;\n\n          const curveParams = params[0];\n          const scatterParams = params[1];\n          return `${curveParams === null || curveParams === void 0 ? void 0 : curveParams.marker}${curveParams === null || curveParams === void 0 ? void 0 : curveParams.name}\n            <br/>${curveParams === null || curveParams === void 0 ? void 0 : curveParams.value}篇\n            <br/>当月focus: ${scatterParams === null || scatterParams === void 0 ? void 0 : (_scatterParams$data = scatterParams.data) === null || _scatterParams$data === void 0 ? void 0 : _scatterParams$data.cate}`;\n        }\n\n      },\n      grid: {\n        bottom: 30,\n        top: 30,\n        left: 30,\n        right: 30\n      },\n      xAxis: {\n        type: 'category',\n        data: xs,\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      yAxis: {\n        name: '发布文章数',\n        type: 'value',\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        splitLine: {\n          lineStyle: {\n            color: 'rgba(158, 158, 158, 0.2)'\n          }\n        },\n        axisLabel: {\n          formatter(value) {\n            return `${value}`;\n          }\n\n        }\n      },\n      series: [{\n        data: ys,\n        type: 'line',\n        smooth: true,\n        showSymbol: false\n      }, scatter]\n    });\n  }, [xs, ys]);\n  return __jsx(\"div\", {\n    className: \"ChartCurve\"\n  }, loading && __jsx(Loading, null), __jsx(\"h3\", {\n    className: \"title\"\n  }, title), __jsx(\"div\", {\n    className: \"chart\",\n    ref: ref\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}