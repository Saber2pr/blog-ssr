{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { appendParams } from '../utils/addLink';\nimport { join } from '../utils/path';\nimport { ApiUrls } from './apiUrls';\nimport { requestApi } from './request';\nexport var requestProxy = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var baseUrl, url, params, _ref$method, method, data, path;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            baseUrl = _ref.baseUrl, url = _ref.url, params = _ref.params, _ref$method = _ref.method, method = _ref$method === void 0 ? 'get' : _ref$method, data = _ref.data;\n            path = baseUrl ? join(baseUrl, url) : url;\n            return _context.abrupt(\"return\", requestApi({\n              method: method,\n              data: data,\n              url: ApiUrls.utils_proxy,\n              params: {\n                url: params ? appendParams(path, params) : path\n              }\n            }));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function requestProxy(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}