{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport './style.less';\nimport ClipboardJS from 'clipboard';\n/*\n * @Author: saber2pr\n * @Date: 2019-07-15 08:49:51\n * @Last Modified by: saber2pr\n * @Last Modified time: 2020-04-07 14:10:59\n */\n\nimport React, { Fragment, useEffect, useRef } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter/dist/cjs/prism-light';\nimport { Link } from '../../../link';\nimport { mergeCode } from '../../core';\nimport { REG } from '../../reg';\nexport function Md2jsx(_ref) {\n  var children = _ref.children,\n      theme = _ref.theme;\n  var jsx = [];\n  var lines = mergeCode(children.split(/\\n|\\r\\n/));\n\n  for (var i = 0; i < lines.length; ++i) {\n    var line = lines[i];\n\n    if (line.startsWith('```')) {\n      renderCode({\n        jsx: jsx,\n        i: i,\n        line: line,\n        theme: theme\n      });\n    } else if (line.startsWith('#')) {\n      renderHeader({\n        jsx: jsx,\n        i: i,\n        line: line\n      });\n    } else if (line.startsWith('>')) {\n      renderComment({\n        jsx: jsx,\n        i: i,\n        line: line\n      });\n    } else if (REG.imgtype.test(line)) {\n      renderImg({\n        jsx: jsx,\n        i: i,\n        line: line\n      });\n    } else if (REG.atype_url.test(line)) {\n      renderAnchor({\n        jsx: jsx,\n        i: i,\n        line: line\n      });\n    } else if (line.startsWith('---') || line.startsWith('***')) {\n      renderHR({\n        jsx: jsx,\n        i: i,\n        line: line\n      });\n    } else {\n      jsx.push(__jsx(\"p\", {\n        key: i,\n        dangerouslySetInnerHTML: {\n          __html: line.replace(/\\t/g, '&nbsp;&nbsp;')\n        }\n      }));\n    }\n  }\n\n  return __jsx(React.Fragment, null, jsx);\n}\n\n(function (_Md2jsx) {\n  var registerLanguage = _Md2jsx.registerLanguage = function (name, meta) {\n    return SyntaxHighlighter.registerLanguage(name, meta);\n  };\n})(Md2jsx || (Md2jsx = {}));\n\nvar renderCode = function renderCode(_ref2) {\n  var line = _ref2.line,\n      jsx = _ref2.jsx,\n      theme = _ref2.theme,\n      i = _ref2.i;\n  var codetype = REG.codetype.exec(line)[0].slice(3);\n  var code = line.slice(codetype.length + 4, line.length - 4);\n\n  var Code = function Code() {\n    var ref = useRef();\n    useEffect(function () {\n      var cp = new ClipboardJS(ref.current);\n      return function () {\n        return cp.destroy();\n      };\n    }, []);\n    var id = 'MD2JSX-Code-' + i;\n    return __jsx(\"div\", {\n      className: \"MD2JSX-Code\"\n    }, __jsx(\"div\", {\n      title: \"\\u590D\\u5236\\u5230\\u526A\\u8D34\\u677F\",\n      className: \"Paste\",\n      ref: ref,\n      \"data-clipboard-target\": '#' + id\n    }, __jsx(\"i\", {\n      className: \"iconfont icon-fuzhi\"\n    })), __jsx(\"div\", {\n      id: id\n    }, __jsx(SyntaxHighlighter, {\n      language: codetype,\n      style: theme\n    }, code)));\n  };\n\n  jsx.push(__jsx(Code, {\n    key: i\n  }));\n};\n\nvar renderHeader = function renderHeader(_ref3) {\n  var line = _ref3.line,\n      jsx = _ref3.jsx,\n      i = _ref3.i;\n  var count = 0;\n  var text = '';\n\n  var _iterator = _createForOfIteratorHelper(line),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var ch = _step.value;\n\n      if (ch === '#') {\n        count++;\n      } else {\n        text += ch;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  jsx.push(__jsx(Fragment, {\n    key: i\n  }, /*#__PURE__*/React.createElement(\"h\".concat(count), null, text)));\n};\n\nvar renderComment = function renderComment(_ref4) {\n  var jsx = _ref4.jsx,\n      i = _ref4.i,\n      line = _ref4.line;\n  jsx.push(__jsx(\"p\", {\n    key: i,\n    style: {\n      color: 'gray',\n      borderLeft: '0.2rem solid #d0d0d0',\n      paddingLeft: '0.5rem'\n    }\n  }, line.slice(2)));\n};\n\nvar renderImg = function renderImg(_ref5) {\n  var jsx = _ref5.jsx,\n      i = _ref5.i,\n      line = _ref5.line;\n  var meta = line.match(REG.imgtype)[0];\n  var title = meta.match(REG.imgtype_title)[0].replace(/\\[|\\]/g, '');\n  var url = meta.match(REG.imgtype_url)[0].replace(/\\(|\\)/g, '');\n  jsx.push(__jsx(\"img\", {\n    key: i,\n    src: url,\n    alt: title,\n    style: {\n      maxWidth: '100%'\n    }\n  }));\n};\n\nvar renderAnchor = function renderAnchor(_ref6) {\n  var jsx = _ref6.jsx,\n      i = _ref6.i,\n      line = _ref6.line;\n  var meta = line.match(REG.atype_url)[0];\n  var title = meta.match(REG.imgtype_title)[0].replace(/\\[|\\]/g, '');\n  var url = meta.match(REG.imgtype_url)[0].replace(/\\(|\\)/g, '');\n  url = url.replace(/^#/, '');\n  jsx.push(__jsx(\"div\", {\n    key: url + title + i\n  }, __jsx(Link, {\n    href: url\n  }, title)));\n};\n\nvar renderHR = function renderHR(_ref7) {\n  var jsx = _ref7.jsx,\n      i = _ref7.i,\n      line = _ref7.line;\n  jsx.push(__jsx(\"hr\", {\n    key: i\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}