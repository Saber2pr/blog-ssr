{"ast":null,"code":"import { isNullOrUndefined } from './is';\nconst WAN = 10000;\nconst YI = 100000000;\n/**\n * 保留size位小数\n * 超过省略，不超过不处理\n * 1.0334 -> 1.03\n * 1.0 -> 1.0\n */\n\nexport const parseFixed = (val, size = 2) => {\n  if (isNullOrUndefined(val) || Number.isNaN(val)) {\n    return '-';\n  }\n  /**\n   * 判断小数点后位数\n   */\n\n\n  const after = String(val).split('.')[1] || '';\n  const afterLength = after.length;\n  const isOver = afterLength > size;\n  return isOver ? Number(val).toFixed(size) : String(val);\n};\n/**\n * 单位化\n */\n\nexport const parseUnit = (val, prefix = '') => {\n  if (isNullOrUndefined(val) || Number.isNaN(val)) {\n    return '-';\n  }\n\n  if (val < 0) {\n    prefix += '-';\n  }\n\n  val = Math.abs(val);\n  const hasWan = val >= WAN; // 小于1万的没有单位\n\n  if (!hasWan) {\n    return prefix + parseFixed(val);\n  }\n\n  const hasYI = val >= YI;\n\n  if (hasYI) {\n    // 大于等于1亿\n    const valByYI = val / YI;\n    const valByYIFixed = parseFixed(valByYI);\n    const resultNum = valByYIFixed;\n    const suffix = '亿';\n    return prefix + resultNum + suffix;\n  } else {\n    // 小于1亿大于等于1w\n    const valByWan = val / WAN;\n    /**\n     * 保留size位小数\n     */\n\n    const valByWanFixed = parseFixed(valByWan);\n    const resultNum = valByWanFixed;\n    const suffix = 'w';\n    return prefix + resultNum + suffix;\n  }\n};\n/**\n * 数字逗号分割\n */\n\nexport const parseNumberSplit = (val, split = ',') => {\n  const reg = /\\.\\d+/;\n  const num = (val || 0).toString();\n  const temp = reg.exec(num);\n  const decimal = temp && temp[0] ? temp[0] : '';\n  const decimalPointIndex = temp && temp.index ? temp.index : num.length;\n  let integerNum = num.slice(0, decimalPointIndex);\n  let result = '';\n\n  while (integerNum.length > 3) {\n    result = split + integerNum.slice(-3) + result;\n    integerNum = integerNum.slice(0, integerNum.length - 3);\n  }\n\n  if (integerNum) {\n    result = integerNum + result;\n  }\n\n  result = result + decimal;\n  return result;\n};","map":null,"metadata":{},"sourceType":"module"}