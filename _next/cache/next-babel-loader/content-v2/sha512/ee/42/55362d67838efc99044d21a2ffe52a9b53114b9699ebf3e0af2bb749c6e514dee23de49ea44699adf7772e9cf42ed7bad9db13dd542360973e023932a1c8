{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useEffect, useRef, useState } from 'react';\n\nvar useEchartsLib = function useEchartsLib() {\n  var _useState = useState(null),\n      lib = _useState[0],\n      setLib = _useState[1];\n\n  useEffect(function () {\n    import('echarts').then(function (echarts) {\n      return setLib(echarts);\n    });\n  }, []);\n  return lib;\n};\n\nexport function useEcharts(options) {\n  var deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var ref = useRef();\n\n  var _useState2 = useState(false),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var echarts = useEchartsLib();\n  useEffect(function () {\n    if (options === null) {\n      return;\n    }\n\n    setLoading(true);\n    var chart = null;\n\n    if (echarts) {\n      chart = echarts.init(ref.current);\n\n      if (typeof options === 'function') {\n        Promise.resolve(options(chart)).then(function () {\n          return setLoading(false);\n        });\n      } else {\n        chart.setOption(options);\n        setLoading(false);\n      }\n    }\n\n    return function () {\n      if (chart) {\n        chart.dispose();\n      }\n    };\n  }, [echarts].concat(_toConsumableArray(deps)));\n  return [ref, loading];\n}","map":null,"metadata":{},"sourceType":"module"}